/**
 * @license
 * Copyright 2016 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const childProcess = require("child_process");
const fs = require("fs");
const chromeFinder = require("./chrome-finder");
const random_port_1 = require("./random-port");
const flags_1 = require("./flags");
const utils_1 = require("./utils");
const net = require("net");
const rimraf = require('rimraf');
const log = require('../lighthouse-core/lib/log');
const spawn = childProcess.spawn;
const execSync = childProcess.execSync;
const isWindows = process.platform === 'win32';
const _SIGINT = 'SIGINT';
const _SIGINT_EXIT_CODE = 130;
const _SUPPORTED_PLATFORMS = new Set(['darwin', 'linux', 'win32']);
function launch(opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        opts.handleSIGINT = utils_1.defaults(opts.handleSIGINT, true);
        const instance = new Launcher(opts);
        // Kill spawned Chrome process in case of ctrl-C.
        if (opts.handleSIGINT) {
            process.on(_SIGINT, () => __awaiter(this, void 0, void 0, function* () {
                yield instance.kill();
                process.exit(_SIGINT_EXIT_CODE);
            }));
        }
        yield instance.launch();
        return { pid: instance.pid, port: instance.port, kill: () => __awaiter(this, void 0, void 0, function* () { return instance.kill(); }) };
    });
}
exports.launch = launch;
class Launcher {
    constructor(opts = {}) {
        this.tmpDirandPidFileReady = false;
        this.pollInterval = 500;
        // choose the first one (default)
        this.startingUrl = utils_1.defaults(opts.startingUrl, 'about:blank');
        this.chromeFlags = utils_1.defaults(opts.chromeFlags, []);
        this.requestedPort = utils_1.defaults(opts.port, 0);
        this.chromePath = opts.chromePath;
    }
    get flags() {
        const flags = flags_1.DEFAULT_FLAGS.concat([
            `--remote-debugging-port=${this.port}`,
            // Place Chrome profile in a custom location we'll rm -rf later
            `--user-data-dir=${this.TMP_PROFILE_DIR}`
        ]);
        if (process.platform === 'linux') {
            flags.push('--disable-setuid-sandbox');
        }
        flags.push(...this.chromeFlags);
        flags.push(this.startingUrl);
        return flags;
    }
    prepare() {
        const platform = process.platform;
        if (!_SUPPORTED_PLATFORMS.has(platform)) {
            throw new Error(`Platform ${platform} is not supported`);
        }
        this.TMP_PROFILE_DIR = utils_1.makeTmpDir();
        this.outFile = fs.openSync(`${this.TMP_PROFILE_DIR}/chrome-out.log`, 'a');
        this.errFile = fs.openSync(`${this.TMP_PROFILE_DIR}/chrome-err.log`, 'a');
        // fix for Node4
        // you can't pass a fd to fs.writeFileSync
        this.pidFile = `${this.TMP_PROFILE_DIR}/chrome.pid`;
        log.verbose('ChromeLauncher', `created ${this.TMP_PROFILE_DIR}`);
        this.tmpDirandPidFileReady = true;
    }
    launch() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.requestedPort !== 0) {
                this.port = this.requestedPort;
                // If an explict port is passed first look for an open connection...
                try {
                    return yield this.isDebuggerReady();
                }
                catch (err) {
                    log.log('ChromeLauncher', `No debugging port found on port ${this.port}, launching a new Chrome.`);
                }
            }
            if (!this.tmpDirandPidFileReady) {
                this.prepare();
            }
            if (this.chromePath === undefined) {
                const installations = yield chromeFinder[process.platform]();
                if (installations.length === 0) {
                    throw new Error('No Chrome Installations Found');
                }
                this.chromePath = installations[0];
            }
            this.pid = yield this.spawn(this.chromePath);
            return Promise.resolve();
        });
    }
    spawn(execPath) {
        return __awaiter(this, void 0, void 0, function* () {
            // Typescript is losing track of the return type without the explict typing.
            const spawnPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                if (this.chrome) {
                    log.log('ChromeLauncher', `Chrome already running with pid ${this.chrome.pid}.`);
                    return resolve(this.chrome.pid);
                }
                // If a zero value port is set, it means the launcher
                // is responsible for generating the port number.
                // We do this here so that we can know the port before
                // we pass it into chrome.
                if (this.requestedPort === 0) {
                    this.port = yield random_port_1.getRandomPort();
                }
                const chrome = spawn(execPath, this.flags, { detached: true, stdio: ['ignore', this.outFile, this.errFile] });
                this.chrome = chrome;
                fs.writeFileSync(this.pidFile, chrome.pid.toString());
                log.verbose('ChromeLauncher', `Chrome running with pid ${chrome.pid} on port ${this.port}.`);
                resolve(chrome.pid);
            }));
            const pid = yield spawnPromise;
            yield this.waitUntilReady();
            return pid;
        });
    }
    cleanup(client) {
        if (client) {
            client.removeAllListeners();
            client.end();
            client.destroy();
            client.unref();
        }
    }
    // resolves if ready, rejects otherwise
    isDebuggerReady() {
        return new Promise((resolve, reject) => {
            const client = net.createConnection(this.port);
            client.once('error', err => {
                this.cleanup(client);
                reject(err);
            });
            client.once('connect', () => {
                this.cleanup(client);
                resolve();
            });
        });
    }
    // resolves when debugger is ready, rejects after 10 polls
    waitUntilReady() {
        const launcher = this;
        return new Promise((resolve, reject) => {
            let retries = 0;
            let waitStatus = 'Waiting for browser.';
            (function poll() {
                if (retries === 0) {
                    log.log('ChromeLauncher', waitStatus);
                }
                retries++;
                waitStatus += '..';
                log.log('ChromeLauncher', waitStatus);
                launcher.isDebuggerReady()
                    .then(() => {
                    log.log('ChromeLauncher', waitStatus + `${log.greenify(log.tick)}`);
                    resolve();
                })
                    .catch(err => {
                    if (retries > 10) {
                        return reject(err);
                    }
                    utils_1.delay(launcher.pollInterval).then(poll);
                });
            })();
        });
    }
    kill() {
        return new Promise(resolve => {
            if (this.chrome) {
                this.chrome.on('close', () => {
                    this.destroyTmp().then(resolve);
                });
                log.log('ChromeLauncher', 'Killing all Chrome Instances');
                try {
                    if (isWindows) {
                        execSync(`taskkill /pid ${this.chrome.pid} /T /F`);
                    }
                    else {
                        process.kill(-this.chrome.pid);
                    }
                }
                catch (err) {
                    log.warn('ChromeLauncher', `Chrome could not be killed ${err.message}`);
                }
                delete this.chrome;
            }
            else {
                // fail silently as we did not start chrome
                resolve();
            }
        });
    }
    destroyTmp() {
        return new Promise(resolve => {
            if (!this.TMP_PROFILE_DIR) {
                return resolve();
            }
            log.verbose('ChromeLauncher', `Removing ${this.TMP_PROFILE_DIR}`);
            if (this.outFile) {
                fs.closeSync(this.outFile);
                delete this.outFile;
            }
            if (this.errFile) {
                fs.closeSync(this.errFile);
                delete this.errFile;
            }
            rimraf(this.TMP_PROFILE_DIR, () => resolve());
        });
    }
}
exports.Launcher = Launcher;
;
//# sourceMappingURL=data:application/json;base64,