/**
 * @license
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require('yargs');
const pkg = require('../package.json');
const Driver = require('../lighthouse-core/gather/driver.js');
const printer_1 = require("./printer");
function getFlags() {
    return yargs.help('help')
        .version(() => pkg.version)
        .showHelpOnFail(false, 'Specify --help for available options')
        .usage('lighthouse <url>')
        .example('lighthouse <url> --view', 'Opens the HTML report in a browser after the run completes')
        .example('lighthouse <url> --config-path=./myconfig.js', 'Runs Lighthouse with your own configuration: custom audits, report generation, etc.')
        .example('lighthouse <url> --output=json --output-path=./report.json --save-assets', 'Save trace, screenshots, and named JSON report.')
        .example('lighthouse <url> --disable-device-emulation --disable-network-throttling', 'Disable device emulation')
        .example('lighthouse <url> --chrome-flags="--window-size=412,732"', 'Launch Chrome with a specific window size')
        .example('lighthouse <url> --quiet --chrome-flags="--headless"', 'Launch Headless Chrome, turn off logging')
        .group(['verbose', 'quiet'], 'Logging:')
        .describe({
        verbose: 'Displays verbose logging',
        quiet: 'Displays no progress, debug logs or errors'
    })
        .group([
        'save-assets', 'save-artifacts', 'list-all-audits', 'list-trace-categories',
        'additional-trace-categories', 'config-path', 'chrome-flags', 'perf', 'port',
        'max-wait-for-load'
    ], 'Configuration:')
        .describe({
        'disable-storage-reset': 'Disable clearing the browser cache and other storage APIs before a run',
        'disable-device-emulation': 'Disable Nexus 5X emulation',
        'disable-cpu-throttling': 'Disable CPU throttling',
        'disable-network-throttling': 'Disable network throttling',
        'save-assets': 'Save the trace contents & screenshots to disk',
        'save-artifacts': 'Save all gathered artifacts to disk',
        'list-all-audits': 'Prints a list of all available audits and exits',
        'list-trace-categories': 'Prints a list of all required trace categories and exits',
        'additional-trace-categories': 'Additional categories to capture with the trace (comma-delimited).',
        'config-path': 'The path to the config JSON.',
        'chrome-flags': 'Custom flags to pass to Chrome (space-delimited). For a full list of flags, see http://peter.sh/experiments/chromium-command-line-switches/.',
        'perf': 'Use a performance-test-only configuration',
        'port': 'The port to use for the debugging protocol. Use 0 for a random port',
        'max-wait-for-load': 'The timeout (in milliseconds) to wait before the page is considered done loading and the run should continue. WARNING: Very high values can lead to large traces and instability',
        'skip-autolaunch': 'Skip autolaunch of Chrome when already running instance is not found',
        'select-chrome': 'Interactively choose version of Chrome to use when multiple installations are found',
        'interactive': 'Open Lighthouse in interactive mode'
    })
        .group(['output', 'output-path', 'view'], 'Output:')
        .describe({
        'output': `Reporter for the results, supports multiple values`,
        'output-path': `The file path to output the results. Use 'stdout' to write to stdout.
If using JSON output, default is stdout.
If using HTML output, default is a file in the working directory with a name based on the test URL and date.
If using multiple outputs, --output-path is ignored.
Example: --output-path=./lighthouse-results.html`,
        'view': 'Open HTML report in your browser'
    })
        .boolean([
        'disable-storage-reset', 'disable-device-emulation', 'disable-cpu-throttling',
        'disable-network-throttling', 'save-assets', 'save-artifacts', 'list-all-audits',
        'list-trace-categories', 'perf', 'view', 'skip-autolaunch', 'select-chrome', 'verbose',
        'quiet', 'help', 'interactive'
    ])
        .choices('output', printer_1.GetValidOutputOptions())
        .default('chrome-flags', '')
        .default('disable-cpu-throttling', false)
        .default('output', printer_1.GetValidOutputOptions()[printer_1.OutputMode.domhtml])
        .default('port', 0)
        .default('max-wait-for-load', Driver.MAX_WAIT_FOR_FULLY_LOADED)
        .check((argv) => {
        // Make sure lighthouse has been passed a url, or at least one of --list-all-audits
        // or --list-trace-categories. If not, stop the program and ask for a url
        if (!argv.listAllAudits && !argv.listTraceCategories && argv._.length === 0) {
            throw new Error('Please provide a url');
        }
        return true;
    })
        .epilogue('For more information on Lighthouse, see https://developers.google.com/web/tools/lighthouse/.')
        .wrap(yargs.terminalWidth())
        .argv;
}
exports.getFlags = getFlags;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLWZsYWdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xpLWZsYWdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILFlBQVksQ0FBQzs7QUFFYixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0IsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdkMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7QUFFOUQsdUNBQTREO0FBUTVEO0lBQ0UsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ3BCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUM7U0FDMUIsY0FBYyxDQUFDLEtBQUssRUFBRSxzQ0FBc0MsQ0FBQztTQUU3RCxLQUFLLENBQUMsa0JBQWtCLENBQUM7U0FDekIsT0FBTyxDQUNKLHlCQUF5QixFQUFFLDREQUE0RCxDQUFDO1NBQzNGLE9BQU8sQ0FDSiw4Q0FBOEMsRUFDOUMscUZBQXFGLENBQUM7U0FDekYsT0FBTyxDQUNKLDBFQUEwRSxFQUMxRSxpREFBaUQsQ0FBQztTQUNyRCxPQUFPLENBQ0osMEVBQTBFLEVBQzFFLDBCQUEwQixDQUFDO1NBQzlCLE9BQU8sQ0FDSix5REFBeUQsRUFDekQsMkNBQTJDLENBQUM7U0FDL0MsT0FBTyxDQUNKLHNEQUFzRCxFQUN0RCwwQ0FBMEMsQ0FBQztTQUc5QyxLQUFLLENBQUMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUUsVUFBVSxDQUFDO1NBQ3ZDLFFBQVEsQ0FBQztRQUNSLE9BQU8sRUFBRSwwQkFBMEI7UUFDbkMsS0FBSyxFQUFFLDRDQUE0QztLQUNwRCxDQUFDO1NBRUQsS0FBSyxDQUNGO1FBQ0UsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLHVCQUF1QjtRQUMzRSw2QkFBNkIs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