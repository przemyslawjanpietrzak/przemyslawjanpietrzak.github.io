/**
 * @license
 * Copyright 2016 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _RUNTIME_ERROR_CODE = 1;
const _PROTOCOL_TIMEOUT_EXIT_CODE = 67;
const assetSaver = require('../lighthouse-core/lib/asset-saver.js');
const getFilenamePrefix = require('../lighthouse-core/lib/file-namer.js').getFilenamePrefix;
const chrome_launcher_1 = require("../chrome-launcher/chrome-launcher");
const Commands = require("./commands/commands");
const cli_flags_1 = require("./cli-flags");
const lighthouse = require('../lighthouse-core');
const log = require('../lighthouse-core/lib/log');
const path = require("path");
const perfOnlyConfig = require('../lighthouse-core/config/perf.json');
const performanceXServer = require('./performance-experiment/server');
const Printer = require("./printer");
const pkg = require('../package.json');
// accept noop modules for these, so the real dependency is optional.
const shim_modules_1 = require("./shim-modules");
shim_modules_1.updateNotifier({ pkg }).notify(); // Tell user if there's a newer version of LH.
const cliFlags = cli_flags_1.getFlags();
// Process terminating command
if (cliFlags.listAllAudits) {
    Commands.ListAudits();
}
// Process terminating command
if (cliFlags.listTraceCategories) {
    Commands.ListTraceCategories();
}
const url = cliFlags._[0];
let config = null;
if (cliFlags.configPath) {
    // Resolve the config file path relative to where cli was called.
    cliFlags.configPath = path.resolve(process.cwd(), cliFlags.configPath);
    config = require(cliFlags.configPath);
}
else if (cliFlags.perf) {
    config = perfOnlyConfig;
}
// set logging preferences
cliFlags.logLevel = 'info';
if (cliFlags.verbose) {
    cliFlags.logLevel = 'verbose';
}
else if (cliFlags.quiet) {
    cliFlags.logLevel = 'silent';
}
log.setLevel(cliFlags.logLevel);
if (cliFlags.output === Printer.OutputMode[Printer.OutputMode.json] && !cliFlags.outputPath) {
    cliFlags.outputPath = 'stdout';
}
/**
 * Attempts to connect to an instance of Chrome with an open remote-debugging
 * port. If none is found and the `skipAutolaunch` flag is not true, launches
 * a debuggable instance.
 */
function getDebuggableChrome(flags) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield chrome_launcher_1.launch({ port: flags.port, chromeFlags: flags.chromeFlags.split(' '), handleSIGINT: true });
    });
}
function showConnectionError() {
    console.error('Unable to connect to Chrome');
    console.error('If you\'re using lighthouse with --skip-autolaunch, ' +
        'make sure you\'re running some other Chrome with a debugger.');
    process.exit(_RUNTIME_ERROR_CODE);
}
function showRuntimeError(err) {
    console.error('Runtime error encountered:', err);
    if (err.stack) {
        console.error(err.stack);
    }
    process.exit(_RUNTIME_ERROR_CODE);
}
function showProtocolTimeoutError() {
    console.error('Debugger protocol timed out while connecting to Chrome.');
    process.exit(_PROTOCOL_TIMEOUT_EXIT_CODE);
}
function showPageLoadError() {
    console.error('Unable to load the page. Please verify the url you are trying to review.');
    process.exit(_RUNTIME_ERROR_CODE);
}
function handleError(err) {
    if (err.code === 'PAGE_LOAD_ERROR') {
        showPageLoadError();
    }
    else if (err.code === 'ECONNREFUSED') {
        showConnectionError();
    }
    else if (err.code === 'CRI_TIMEOUT') {
        showProtocolTimeoutError();
    }
    else {
        showRuntimeError(err);
    }
}
function saveResults(results, artifacts, flags) {
    let promise = Promise.resolve(results);
    const cwd = process.cwd();
    // Use the output path as the prefix for all generated files.
    // If no output path is set, generate a file prefix using the URL and date.
    const configuredPath = !flags.outputPath || flags.outputPath === 'stdout' ?
        getFilenamePrefix(results) :
        flags.outputPath.replace(/\.\w{2,4}$/, '');
    const resolvedPath = path.resolve(cwd, configuredPath);
    if (flags.saveArtifacts) {
        assetSaver.saveArtifacts(artifacts, resolvedPath);
    }
    if (flags.saveAssets) {
        promise = promise.then(_ => assetSaver.saveAssets(artifacts, results.audits, resolvedPath));
    }
    const typeToExtension = (type) => type === 'domhtml' ? 'dom.html' : type;
    return promise.then(_ => {
        if (Array.isArray(flags.output)) {
            return flags.output.reduce((innerPromise, outputType) => {
                const outputPath = `${resolvedPath}.report.${typeToExtension(outputType)}`;
                return innerPromise.then((_) => Printer.write(results, outputType, outputPath));
            }, Promise.resolve(results));
        }
        else {
            const outputPath = flags.outputPath || `${resolvedPath}.report.${typeToExtension(flags.output)}`;
            return Printer.write(results, flags.output, outputPath).then(results => {
                if (flags.output === Printer.OutputMode[Printer.OutputMode.html] ||
                    flags.output === Printer.OutputMode[Printer.OutputMode.domhtml]) {
                    if (flags.view) {
                        shim_modules_1.opn(outputPath, { wait: false });
                    }
                    else {
                        log.log('CLI', 'Protip: Run lighthouse with `--view` to immediately open the HTML report in your browser');
                    }
                }
                return results;
            });
        }
    });
}
function runLighthouse(url, flags, config) {
    return __awaiter(this, void 0, void 0, function* () {
        let launchedChrome;
        try {
            launchedChrome = yield getDebuggableChrome(flags);
            flags.port = launchedChrome.port;
            const results = yield lighthouse(url, flags, config);
            const artifacts = results.artifacts;
            delete results.artifacts;
            yield saveResults(results, artifacts, flags);
            if (flags.interactive) {
                yield performanceXServer.hostExperiment({ url, flags, config }, results);
            }
            return yield launchedChrome.kill();
        }
        catch (err) {
            if (typeof launchedChrome !== 'undefined') {
                yield launchedChrome.kill();
            }
            return handleError(err);
        }
    });
}
exports.runLighthouse = runLighthouse;
function run() {
    return runLighthouse(url, cliFlags, config);
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILFlBQVksQ0FBQzs7Ozs7Ozs7OztBQUViLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLE1BQU0sMkJBQTJCLEdBQUcsRUFBRSxDQUFDO0FBRXZDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBQ3BFLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7QUFDNUYsd0VBQTBFO0FBQzFFLGdEQUFnRDtBQUNoRCwyQ0FBNEM7QUFDNUMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDakQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFDbEQsNkJBQTZCO0FBQzdCLE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0FBQ3RFLE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7QUFDdEUscUNBQXFDO0FBRXJDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXZDLHFFQUFxRTtBQUNyRSxpREFBbUQ7QUFFbkQsNkJBQWMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyw4Q0FBOEM7QUFNOUUsTUFBTSxRQUFRLEdBQUcsb0JBQVEsRUFBRSxDQUFDO0FBRTVCLDhCQUE4QjtBQUM5QixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUMzQixRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDeEIsQ0FBQztBQUVELDhCQUE4QjtBQUM5QixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMs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